/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.obeonetwork.dsl.east_adl.structure.platform_model.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.obeonetwork.dsl.east_adl.structure.platform_model.util.Platform_modelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Platform_modelItemProviderAdapterFactory extends Platform_modelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Platform_modelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.east_adl.structure.platform_model.PlatformModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformModelItemProvider platformModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.obeonetwork.dsl.east_adl.structure.platform_model.PlatformModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformModelAdapter() {
		if (platformModelItemProvider == null) {
			platformModelItemProvider = new PlatformModelItemProvider(this);
		}

		return platformModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.east_adl.structure.platform_model.DeviceDriver} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeviceDriverItemProvider deviceDriverItemProvider;

	/**
	 * This creates an adapter for a {@link org.obeonetwork.dsl.east_adl.structure.platform_model.DeviceDriver}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeviceDriverAdapter() {
		if (deviceDriverItemProvider == null) {
			deviceDriverItemProvider = new DeviceDriverItemProvider(this);
		}

		return deviceDriverItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.east_adl.structure.platform_model.IODriver} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IODriverItemProvider ioDriverItemProvider;

	/**
	 * This creates an adapter for a {@link org.obeonetwork.dsl.east_adl.structure.platform_model.IODriver}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIODriverAdapter() {
		if (ioDriverItemProvider == null) {
			ioDriverItemProvider = new IODriverItemProvider(this);
		}

		return ioDriverItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.east_adl.structure.platform_model.HardwareAbstractionFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HardwareAbstractionFunctionItemProvider hardwareAbstractionFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.obeonetwork.dsl.east_adl.structure.platform_model.HardwareAbstractionFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHardwareAbstractionFunctionAdapter() {
		if (hardwareAbstractionFunctionItemProvider == null) {
			hardwareAbstractionFunctionItemProvider = new HardwareAbstractionFunctionItemProvider(this);
		}

		return hardwareAbstractionFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.east_adl.structure.platform_model.OperatingSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperatingSystemItemProvider operatingSystemItemProvider;

	/**
	 * This creates an adapter for a {@link org.obeonetwork.dsl.east_adl.structure.platform_model.OperatingSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperatingSystemAdapter() {
		if (operatingSystemItemProvider == null) {
			operatingSystemItemProvider = new OperatingSystemItemProvider(this);
		}

		return operatingSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.east_adl.structure.platform_model.Framework} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FrameworkItemProvider frameworkItemProvider;

	/**
	 * This creates an adapter for a {@link org.obeonetwork.dsl.east_adl.structure.platform_model.Framework}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFrameworkAdapter() {
		if (frameworkItemProvider == null) {
			frameworkItemProvider = new FrameworkItemProvider(this);
		}

		return frameworkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.east_adl.structure.platform_model.MWCompositeSoftwareFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MWCompositeSoftwareFunctionItemProvider mwCompositeSoftwareFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.obeonetwork.dsl.east_adl.structure.platform_model.MWCompositeSoftwareFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMWCompositeSoftwareFunctionAdapter() {
		if (mwCompositeSoftwareFunctionItemProvider == null) {
			mwCompositeSoftwareFunctionItemProvider = new MWCompositeSoftwareFunctionItemProvider(this);
		}

		return mwCompositeSoftwareFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.east_adl.structure.platform_model.MWElementarySoftwareFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MWElementarySoftwareFunctionItemProvider mwElementarySoftwareFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.obeonetwork.dsl.east_adl.structure.platform_model.MWElementarySoftwareFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMWElementarySoftwareFunctionAdapter() {
		if (mwElementarySoftwareFunctionItemProvider == null) {
			mwElementarySoftwareFunctionItemProvider = new MWElementarySoftwareFunctionItemProvider(this);
		}

		return mwElementarySoftwareFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.east_adl.structure.platform_model.SystemPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemPortItemProvider systemPortItemProvider;

	/**
	 * This creates an adapter for a {@link org.obeonetwork.dsl.east_adl.structure.platform_model.SystemPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemPortAdapter() {
		if (systemPortItemProvider == null) {
			systemPortItemProvider = new SystemPortItemProvider(this);
		}

		return systemPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.east_adl.structure.platform_model.MWLocalPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MWLocalPortItemProvider mwLocalPortItemProvider;

	/**
	 * This creates an adapter for a {@link org.obeonetwork.dsl.east_adl.structure.platform_model.MWLocalPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMWLocalPortAdapter() {
		if (mwLocalPortItemProvider == null) {
			mwLocalPortItemProvider = new MWLocalPortItemProvider(this);
		}

		return mwLocalPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.east_adl.structure.platform_model.MWRemotePort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MWRemotePortItemProvider mwRemotePortItemProvider;

	/**
	 * This creates an adapter for a {@link org.obeonetwork.dsl.east_adl.structure.platform_model.MWRemotePort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMWRemotePortAdapter() {
		if (mwRemotePortItemProvider == null) {
			mwRemotePortItemProvider = new MWRemotePortItemProvider(this);
		}

		return mwRemotePortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.east_adl.structure.platform_model.IPCExchanger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IPCExchangerItemProvider ipcExchangerItemProvider;

	/**
	 * This creates an adapter for a {@link org.obeonetwork.dsl.east_adl.structure.platform_model.IPCExchanger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIPCExchangerAdapter() {
		if (ipcExchangerItemProvider == null) {
			ipcExchangerItemProvider = new IPCExchangerItemProvider(this);
		}

		return ipcExchangerItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (platformModelItemProvider != null) platformModelItemProvider.dispose();
		if (deviceDriverItemProvider != null) deviceDriverItemProvider.dispose();
		if (ioDriverItemProvider != null) ioDriverItemProvider.dispose();
		if (hardwareAbstractionFunctionItemProvider != null) hardwareAbstractionFunctionItemProvider.dispose();
		if (operatingSystemItemProvider != null) operatingSystemItemProvider.dispose();
		if (frameworkItemProvider != null) frameworkItemProvider.dispose();
		if (mwCompositeSoftwareFunctionItemProvider != null) mwCompositeSoftwareFunctionItemProvider.dispose();
		if (mwElementarySoftwareFunctionItemProvider != null) mwElementarySoftwareFunctionItemProvider.dispose();
		if (systemPortItemProvider != null) systemPortItemProvider.dispose();
		if (mwLocalPortItemProvider != null) mwLocalPortItemProvider.dispose();
		if (mwRemotePortItemProvider != null) mwRemotePortItemProvider.dispose();
		if (ipcExchangerItemProvider != null) ipcExchangerItemProvider.dispose();
	}

}
